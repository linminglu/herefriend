// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package pushmsg

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type PushMsg interface {
	// Parameters:
	//  - Badge
	//  - Clientid
	//  - Msgtype
	//  - Title
	//  - Msgcontent
	Notify(badge int32, clientid string, msgtype int32, title string, msgcontent string) (err error)
}

type PushMsgClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewPushMsgClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PushMsgClient {
	return &PushMsgClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewPushMsgClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PushMsgClient {
	return &PushMsgClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Badge
//  - Clientid
//  - Msgtype
//  - Title
//  - Msgcontent
func (p *PushMsgClient) Notify(badge int32, clientid string, msgtype int32, title string, msgcontent string) (err error) {
	if err = p.sendNotify(badge, clientid, msgtype, title, msgcontent); err != nil {
		return
	}
	return p.recvNotify()
}

func (p *PushMsgClient) sendNotify(badge int32, clientid string, msgtype int32, title string, msgcontent string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("notify", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := NotifyArgs{
		Badge:      badge,
		Clientid:   clientid,
		Msgtype:    msgtype,
		Title:      title,
		Msgcontent: msgcontent,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *PushMsgClient) recvNotify() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "notify failed: out of sequence response")
		return
	}
	result := NotifyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

type PushMsgProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PushMsg
}

func (p *PushMsgProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PushMsgProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PushMsgProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPushMsgProcessor(handler PushMsg) *PushMsgProcessor {

	self2 := &PushMsgProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self2.processorMap["notify"] = &pushMsgProcessorNotify{handler: handler}
	return self2
}

func (p *PushMsgProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x3 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x3.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x3

}

type pushMsgProcessorNotify struct {
	handler PushMsg
}

func (p *pushMsgProcessorNotify) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NotifyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("notify", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := NotifyResult{}
	var err2 error
	if err2 = p.handler.Notify(args.Badge, args.Clientid, args.Msgtype, args.Title, args.Msgcontent); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing notify: "+err2.Error())
		oprot.WriteMessageBegin("notify", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("notify", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type NotifyArgs struct {
	Badge      int32  `thrift:"badge,1" json:"badge"`
	Clientid   string `thrift:"clientid,2" json:"clientid"`
	Msgtype    int32  `thrift:"msgtype,3" json:"msgtype"`
	Title      string `thrift:"title,4" json:"title"`
	Msgcontent string `thrift:"msgcontent,5" json:"msgcontent"`
}

func NewNotifyArgs() *NotifyArgs {
	return &NotifyArgs{}
}

func (p *NotifyArgs) GetBadge() int32 {
	return p.Badge
}

func (p *NotifyArgs) GetClientid() string {
	return p.Clientid
}

func (p *NotifyArgs) GetMsgtype() int32 {
	return p.Msgtype
}

func (p *NotifyArgs) GetTitle() string {
	return p.Title
}

func (p *NotifyArgs) GetMsgcontent() string {
	return p.Msgcontent
}
func (p *NotifyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Badge = v
	}
	return nil
}

func (p *NotifyArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Clientid = v
	}
	return nil
}

func (p *NotifyArgs) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Msgtype = v
	}
	return nil
}

func (p *NotifyArgs) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Title = v
	}
	return nil
}

func (p *NotifyArgs) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Msgcontent = v
	}
	return nil
}

func (p *NotifyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notify_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("badge", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:badge: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Badge)); err != nil {
		return fmt.Errorf("%T.badge (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:badge: %s", p, err)
	}
	return err
}

func (p *NotifyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientid", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:clientid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Clientid)); err != nil {
		return fmt.Errorf("%T.clientid (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:clientid: %s", p, err)
	}
	return err
}

func (p *NotifyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgtype", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:msgtype: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Msgtype)); err != nil {
		return fmt.Errorf("%T.msgtype (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:msgtype: %s", p, err)
	}
	return err
}

func (p *NotifyArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("title", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:title: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Title)); err != nil {
		return fmt.Errorf("%T.title (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:title: %s", p, err)
	}
	return err
}

func (p *NotifyArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msgcontent", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:msgcontent: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Msgcontent)); err != nil {
		return fmt.Errorf("%T.msgcontent (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:msgcontent: %s", p, err)
	}
	return err
}

func (p *NotifyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyArgs(%+v)", *p)
}

type NotifyResult struct {
}

func NewNotifyResult() *NotifyResult {
	return &NotifyResult{}
}

func (p *NotifyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *NotifyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("notify_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *NotifyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NotifyResult(%+v)", *p)
}
